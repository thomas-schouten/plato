diff --git a/plato/utils_calc.py b/plato/utils_calc.py
index f1b4231..8caf26a 100644
--- a/plato/utils_calc.py
+++ b/plato/utils_calc.py
@@ -14,7 +14,6 @@ import numpy as _numpy
 import pandas as _pandas
 import pygplates as _pygplates
 import xarray as _xarray
-from scipy.spatial.transform import Rotation
 
 # ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 # VALUES
@@ -47,9 +46,8 @@ class set_mech_params:
         self.lith_visc = 500e20                             # lithospheric viscosity [Pa s]
         self.lith_age_RP = 60                               # age of oldest sea-floor in approximate ridge push calculation  [Ma]
         self.yield_stress = 1050e6                          # Byerlee yield strength at 40km, i.e. 60e6 + 0.6*(3300*10.0*40e3) [Pa]
-        self.cont_lith_thick = 100e3                        # reference continental lithospheric thickness (where there is no age) [m]
-        self.cont_crust_thick = 33e3                        # reference continental crustal thickness (where there is no age) [m]
-        self.cont_LAB_depth = 60e3                          # reference depth of the lithosphere-asthenosphere boundary below continents [m]
+        self.cont_lith_thick = 100e3                        # continental lithospheric thickness (where there is no age) [m]
+        self.cont_crust_thick = 33e3                        # continental crustal thickness (where there is no age) [m]
         self.island_arc_lith_thick = 50e3                   # island arc lithospheric thickness (where there is an age) [m]
         self.ocean_crust_thick = 8e3                        # oceanic crustal thickness [m]
 
@@ -185,12 +183,12 @@ def compute_interface_term(
         interface_term = 1.
     
     # Multiply by slab pull constant
-    slab_data["slab_pull_constant"] *= interface_term
+    interface_term *= slab_data["slab_pull_constant"]
 
     # Apply interface term to slab pull force
-    slab_data["slab_pull_force_mag"] *= slab_data["slab_pull_constant"]
-    slab_data["slab_pull_force_lat"] *= slab_data["slab_pull_constant"]
-    slab_data["slab_pull_force_lon"] *= slab_data["slab_pull_constant"]
+    slab_data["slab_pull_force_mag"] *= interface_term
+    slab_data["slab_pull_force_lat"] *= interface_term
+    slab_data["slab_pull_force_lon"] *= interface_term
 
     return slab_data
 
@@ -402,19 +400,12 @@ def compute_mantle_drag_force(
         # points.loc[mask, "mantle_drag_force_lon"] = -1 * points.loc[mask, "velocity_lon"] * constants.cm_a2m_s * options["Mantle viscosity"] / mech.La
         # points.loc[:, "mantle_drag_force_mag"] = _numpy.linalg.norm([points["mantle_drag_force_lat"], points["mantle_drag_force_lon"]], axis=0)
 
-        if options["Depth-dependent mantle drag"]:
-            # Calculate asthenospheric thickness
-            asthenospheric_thickness = _numpy.where(
-                points["LAB_depth"] > options["LAB depth threshold"],
-                mech.La - points["LAB_depth"] + options["LAB depth threshold"],
-                mech.La
-            )
+        if options["Continental keels"]:
+            points["mantle_drag_force_lat"] = -1 * points["velocity_lat"] * constants.cm_a2m_s * options["Mantle viscosity"] / (300e3 - points["LAB_depth"])
+            points["mantle_drag_force_lon"] = -1 * points["velocity_lon"] * constants.cm_a2m_s * options["Mantle viscosity"] / (300e3 - points["LAB_depth"])
         else:
-            asthenospheric_thickness = mech.La
-
-        # Calculate mantle drag force
-        points["mantle_drag_force_lat"] = -1 * points["velocity_lat"] * constants.cm_a2m_s * options["Mantle viscosity"] / asthenospheric_thickness
-        points["mantle_drag_force_lon"] = -1 * points["velocity_lon"] * constants.cm_a2m_s * options["Mantle viscosity"] / asthenospheric_thickness
+            points["mantle_drag_force_lat"] = -1 * points["velocity_lat"] * constants.cm_a2m_s * options["Mantle viscosity"] / mech.La
+            points["mantle_drag_force_lon"] = -1 * points["velocity_lon"] * constants.cm_a2m_s * options["Mantle viscosity"] / mech.La
 
         points["mantle_drag_force_mag"] = _numpy.linalg.norm([points["mantle_drag_force_lat"], points["mantle_drag_force_lon"]], axis=0)
         
@@ -569,7 +560,7 @@ def compute_torque_on_plates(
     )
 
     # Calculate the position vector of the centroid of the plate in Cartesian coordinates
-    centroid_position_xyz = geocentric_spherical2cartesian(plate_data.centroid_lat, plate_data.centroid_lon)#, constants.mean_Earth_radius_m)
+    centroid_position_xyz = geocentric_spherical2cartesian(plate_data.centroid_lat, plate_data.centroid_lon, constants.mean_Earth_radius_m)
 
     # Calculate the torque vector as the cross product of the Cartesian torque vector (x, y, z) with the position vector of the centroid
     summed_torques_xyz = _numpy.asarray([
@@ -578,7 +569,7 @@ def compute_torque_on_plates(
     centroid_force_xyz = _numpy.cross(summed_torques_xyz, centroid_position_xyz, axis=0)
 
     # Compute force magnitude at centroid
-    centroid_force_sph = tangent_cartesian2spherical(centroid_force_xyz.T, plate_data.centroid_lat, plate_data.centroid_lon)
+    centroid_force_sph = geocentric_cartesian2spherical(centroid_force_xyz[0], centroid_force_xyz[1], centroid_force_xyz[2])
 
     # Store values in the torques DataFrame
     plate_data[f"{torque_var}_force_lat"] = centroid_force_sph[0]
@@ -629,7 +620,7 @@ def sum_torque(
     plate_data.loc[:, f"{torque_type}_torque_mag"] = _numpy.linalg.norm(summed_torques_cartesian, axis=0)
 
     # Calculate the position vector of the centroid of the plate in Cartesian coordinates
-    centroid_position = geocentric_spherical2cartesian(plate_data.centroid_lat, plate_data.centroid_lon)#, constants.mean_Earth_radius_m)
+    centroid_position = geocentric_spherical2cartesian(plate_data.centroid_lat, plate_data.centroid_lon, constants.mean_Earth_radius_m)
 
     # Calculate the torque vector as the cross product of the Cartesian torque vector (x, y, z) with the position vector of the centroid
     force_at_centroid_xyz = _numpy.cross(summed_torques_cartesian, centroid_position, axis=0)
@@ -685,7 +676,7 @@ def sample_grid(
 
     # Interpolate age value at point
     sampled_values = _numpy.asarray(
-        grid.interp({coords[0]: points_lat_da, coords[1]: points_lon_da}, method="linear").values.tolist()
+        grid.interp({coords[0]: points_lat_da, coords[1]: points_lon_da}, method="nearest").values.tolist()
     )
 
     # Close the grid to free memory space
@@ -811,7 +802,7 @@ def compute_LAB_depth(
     nan_mask = point_data["LAB_depth"].isna()
 
     # Fill NaN values with 0
-    point_data.loc[nan_mask, "LAB_depth"] = mech.cont_LAB_depth
+    point_data.loc[nan_mask, "LAB_depth"] = mech.cont_crust_thick + mech.cont_lith_thick
 
     return point_data
 
@@ -1110,33 +1101,13 @@ def compute_synthetic_stage_rotation(
     stage_rotation_poles_mag = _numpy.nan_to_num(stage_rotation_poles_mag)
 
     # Normalise the rotation poles by the drag coefficient and the area of a plate
-    if options["Depth-dependent mantle drag"]:
-        stage_rotation_poles_mag /= options["Mantle viscosity"] / plates["mean_asthenospheric_thickness"] * plates.area
+    if options["Continental keels"]:
+        stage_rotation_poles_mag /= options["Mantle viscosity"] / (300e3 - plates.mean_LAB_depth) * plates.area
     else:
         stage_rotation_poles_mag /= options["Mantle viscosity"] / mech.La * plates.area
 
     # Convert to degrees because the 'geocentric_cartesian2spherical' does not convert the magnitude to degrees
     stage_rotation_poles_mag = _numpy.rad2deg(stage_rotation_poles_mag)
-
-    # Make sure that all poles are on the northern hemisphere
-    stage_rotation_poles_lat = _numpy.where(
-        stage_rotation_poles_lat < 0,
-        -1 * stage_rotation_poles_lat,
-        stage_rotation_poles_lat
-    )
-
-    stage_rotation_poles_lon = _numpy.where(
-        stage_rotation_poles_lat < 0,
-        stage_rotation_poles_lon + 180 % 360,
-        stage_rotation_poles_lon
-    )
-
-    stage_rotation_poles_lat = _numpy.where(
-        stage_rotation_poles_lat < 0,
-        -1 * stage_rotation_poles_mag,
-        stage_rotation_poles_mag
-    )
-
     
     # Assign to DataFrame
     plates["pole_lat"] = stage_rotation_poles_lat
@@ -1264,7 +1235,7 @@ def compute_net_rotation(
 
         # Calculate rotation pole in Cartesian coordinates
         # The shape of the rotation pole vector is (3,)
-        rotation_xyz = _numpy.array(geocentric_spherical2cartesian(
+        rotation_pole_xyz = _numpy.array(geocentric_spherical2cartesian(
             plate.pole_lat, 
             plate.pole_lon, 
             plate.pole_angle,
@@ -1272,17 +1243,17 @@ def compute_net_rotation(
 
         # Calculate the double cross product of the position vector and the velocity vector (see Torsvik et al. (2010), https://doi.org/10.1016/j.epsl.2009.12.055)
         # The shape of the rotation pole vector is modified to (1, 3) to allow broadcasting
-        point_rotations_xyz = _numpy.cross(_numpy.cross(rotation_xyz[None, :], positions_xyz), positions_xyz)
+        point_rotations_xyz = _numpy.cross(_numpy.cross(rotation_pole_xyz[None, :], positions_xyz), positions_xyz)
 
         # Weight the rotations by segment area (broadcasted multiplication)
         segment_area = (selected_points.segment_length_lat * selected_points.segment_length_lon).values[:, None]
         point_rotations_xyz *= segment_area
 
         # Accumulate the net rotation vector by summing across all points
-        net_rotation_xyz += _numpy.sum(point_rotations_xyz, axis=0)
+        net_rotation_xyz += point_rotations_xyz.sum(axis=0)
 
     # Normalise the net rotation vector by the total area of the lithosphere
-    net_rotation_xyz /= _numpy.sum(point_data.segment_length_lat * point_data.segment_length_lon)
+    net_rotation_xyz /= plate_data.area.sum()
 
     # Convert the net rotation vector to spherical coordinates
     net_rotation_pole_lat, net_rotation_pole_lon, _, _ = geocentric_cartesian2spherical(
@@ -1303,105 +1274,40 @@ def compute_no_net_rotation(
     """
     # Calculate net rotation in spherical coordinates
     net_rotation_lat, net_rotation_lon, net_rotation_mag = compute_net_rotation(plate_data, point_data)
-    # print(net_rotation_lat, net_rotation_lon, net_rotation_mag)
-    # rt net rotation pole to FiniteRotation
-    # net_rotation_pole = _pygplates.FiniteRotation((net_rotation_lat[0], net_rotation_lon[0]), _numpy.deg2rad(net_rotation_mag))
 
-    # print(net_rotation_xyz)
+    # Convert net rotation to Cartesian coordinates
+    net_rotation_xyz = _numpy.column_stack(geocentric_spherical2cartesian(
+        net_rotation_lat, 
+        net_rotation_lon, 
+        net_rotation_mag,
+    ))
 
     # Loop through plates
-    # for index, plate in plate_data.iterrows():
-    #     # Calculate rotation pole in Cartesian coordinates
-    #     rotation_xyz = _numpy.column_stack(geocentric_spherical2cartesian(
-    #         plate.pole_lat, 
-    #         plate.pole_lon, 
-    #         plate.pole_angle,
-    #     ))
-
-    #     # Convert Euler angles to rotation matrices
-    #     R1 = Rotation.from_euler('xyz', rotation_xyz.flatten(), degrees=True).as_matrix()
-    #     R2 = Rotation.from_euler('xyz', net_rotation_xyz.flatten(), degrees=True).as_matrix()
-        
-    #     # Compute the inverse of R2
-    #     R2_inv = R2.T  # Transpose is the inverse of an orthonormal matrix
-        
-    #     # Apply inverse rotation
-    #     R_new = R2_inv @ R1
-        
-    #     # Convert back to Euler angles
-    #     new_rotation_xyz = Rotation.from_matrix(R_new).as_euler('xyz', degrees=True)
-        
-    #     # Convert the new rotation pole to spherical coordinates
-    #     new_rotation_pole_lat, new_rotation_pole_lon, _, _ = geocentric_cartesian2spherical(
-    #         new_rotation_xyz[0], new_rotation_xyz[1], new_rotation_xyz[2],
-    #     )
-
-    #     # Compute magnitude of the rotation rate
-    #     new_rotation_rate = _numpy.linalg.norm(new_rotation_xyz)
-
-    #     # Assign new rotation pole to DataFrame
-    #     plate_data.loc[index, "pole_lat"] = new_rotation_pole_lat[0]
-    #     plate_data.loc[index, "pole_lon"] = new_rotation_pole_lon[0]
-    #     plate_data.loc[index, "pole_angle"] = new_rotation_rate
-    
-    # NOTE: This is done iteratively as the discretisation of the Earth into a 1x1 degree grid introduces numerical errors.
-    for k in range(1000):
-         # Convert net rotation to Cartesian coordinates
-        net_rotation_xyz = _numpy.column_stack(geocentric_spherical2cartesian(
-            net_rotation_lat, 
-            net_rotation_lon, 
-            net_rotation_mag,
+    for index, plate in plate_data.iterrows():
+        # Calculate rotation pole in Cartesian coordinates
+        rotation_pole_xyz = _numpy.column_stack(geocentric_spherical2cartesian(
+            plate.pole_lat, 
+            plate.pole_lon, 
+            plate.pole_angle,
         ))
 
-        # Loop through plates
-        for index, plate in plate_data.iterrows():
-            # # Calculate rotation pole in Cartesian coordinates
-            rotation_pole_xyz = _numpy.column_stack(geocentric_spherical2cartesian(
-                plate.pole_lat, 
-                plate.pole_lon, 
-                plate.pole_angle,
-            ))
-
-            # Convert rotation pole to FiniteRotation
-            # rotation_pole = _pygplates.FiniteRotation((plate.pole_lat, plate.pole_lon), _numpy.deg2rad(plate.pole_angle))
-
-            # 
-
-            # Add the net rotation from the stage rotation
-            # NOTE: not sure why it is addition and not subtraction, but it works the same as every other implementation I've tried.
-            new_rotation_pole_xyz = rotation_pole_xyz + net_rotation_xyz
-            # new_rotation_pole = _pygplates.FiniteRotation.compose(rotation_pole, net_rotation_pole)
-
-
-            # new_rotation_pole_lat, new_rotation_pole_lon, new_rotation_pole_angle = new_rotation_pole.get_lat_lon_euler_pole_and_angle_degrees()
-            # # Convert the new rotation pole to spherical coordinates
-            new_rotation_pole_lat, new_rotation_pole_lon, _, _ = geocentric_cartesian2spherical(
-                new_rotation_pole_xyz[:, 0], new_rotation_pole_xyz[:, 1], new_rotation_pole_xyz[:, 2],
-            )
-
-            # # Calculate the magnitude of the new rotation pole
-            new_rotation_rate = _numpy.linalg.norm(new_rotation_pole_xyz)
-
-            # Assign new rotation pole to DataFrame
-            plate_data.loc[index, "pole_lat"] = new_rotation_pole_lat
-            plate_data.loc[index, "pole_lon"] = new_rotation_pole_lon
-            plate_data.loc[index, "pole_angle"] = new_rotation_rate
+        # Subtract the net rotation from the stage rotation
+        new_rotation_pole_xyz = rotation_pole_xyz + net_rotation_xyz
 
-        # Compute velocity at points
-        point_velocities = compute_velocity(point_data, plate_data, constants)
-        for i, col in enumerate(["velocity_lat", "velocity_lon", "velocity_mag", "velocity_azi", "spin_rate_mag"]):
-            point_data.loc[point_data.index, col] = point_velocities[i]
+        # Convert the new rotation pole to spherical coordinates
+        new_rotation_pole_lat, new_rotation_pole_lon, _, _ = geocentric_cartesian2spherical(
+            new_rotation_pole_xyz[:, 0], new_rotation_pole_xyz[:, 1], new_rotation_pole_xyz[:, 2],
+        )
 
-        # Recompute net rotation
-        # Calculate net rotation in spherical coordinates
-        net_rotation_lat, net_rotation_lon, net_rotation_mag = compute_net_rotation(plate_data, point_data)
-        # print(net_rotation_lat, net_rotation_lon, net_rotation_mag)
+        # Calculate the magnitude of the new rotation pole
+        new_rotation_rate = _numpy.linalg.norm(new_rotation_pole_xyz)
 
-        # If the net rotation is smaller than 0.000001 degrees, break
-        if net_rotation_mag < 1e-5:
-            break
+        # Assign new rotation pole to DataFrame
+        plate_data.loc[index, "pole_lat"] = new_rotation_pole_lat[0]
+        plate_data.loc[index, "pole_lon"] = new_rotation_pole_lon[0]
+        plate_data.loc[index, "pole_angle"] = new_rotation_rate
 
-    return plate_data, point_data
+    return plate_data
 
 def compute_trench_migration(
         slab_data: _pandas.DataFrame,
